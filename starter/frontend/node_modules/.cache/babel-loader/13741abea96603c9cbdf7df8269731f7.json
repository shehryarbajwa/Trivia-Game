{"ast":null,"code":"var _jsxFileName = \"/Users/shehryarbajwa/trivia-API/starter/frontend/src/components/QuestionView.js\";\nimport React from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends React.Component {\n  constructor() {\n    super();\n\n    this.getQuestions = () => {\n      fetch(\"/questions?page=\".concat(this.state.page)).then(res => res.json()).then(result => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          categories: result.categories,\n          currentCategory: result.current_category\n        });\n      }, error => {\n        alert('Unable to load questions. Please try your request again');\n      });\n    };\n\n    this.getByCategory = (id, page = 1) => {\n      $.ajax({\n        url: \"/categories/\".concat(id, \"/questions?page=\").concat(page),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            page: page,\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitSearch = (searchTerm, page = 1) => {\n      $.ajax({\n        url: \"/searchQuestions?page=\".concat(page),\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          searchTerm: searchTerm\n        }),\n        xhrFields: {\n          withCredentials: true\n        },\n        crossDomain: true,\n        success: result => {\n          this.setState({\n            searchQuery: searchTerm,\n            page: page,\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions. Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the question?')) {\n          $.ajax({\n            url: \"/questions/\".concat(id),\n            //TODO: update request URL\n            type: \"DELETE\",\n            success: result => {\n              this.getQuestions();\n            },\n            error: error => {\n              alert('Unable to load questions. Please try your request again');\n              return;\n            }\n          });\n        }\n      }\n    };\n\n    this.state = {\n      searchQuery: '',\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: [],\n      currentCategory: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  } // getQuestions = () => {\n  //   $.ajax({\n  //     url: `/questions?page=${this.state.page}`, //TODO: update request URL\n  //     type: \"GET\",\n  //     success: (result) => {\n  //       //Here this refers to success\n  //       //success.setState\n  //       this.setState({\n  //         questions: result.questions,\n  //         totalQuestions: result.total_questions,\n  //         categories: result.categories,\n  //         currentCategory: result.current_category \n  //       })\n  //       return;\n  //     },\n  //     error: (error) => {\n  //       alert('Unable to load questions. Please try your request again')\n  //       return;\n  //     }\n  //   })\n  // }\n\n\n  selectPage(num) {\n    if (this.state.currentCategory) {\n      this.getByCategory(this.state.currentCategory.id, num);\n    } else if (this.state.searchQuery) {\n      this.submitSearch(this.state.searchQuery, num);\n    } else {\n      this.setState({\n        page: num\n      }, () => this.getQuestions());\n    }\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(React.createElement(\"span\", {\n        key: i,\n        className: \"page-num \".concat(i === this.state.page ? 'active' : ''),\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80\n        },\n        __self: this\n      }, i));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"question-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"categories-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      onClick: () => {\n        this.getQuestions();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, \"Categories\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, this.state.categories.map(category => React.createElement(\"li\", {\n      key: category.id,\n      onClick: () => {\n        this.getByCategory(category.id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, category.type, React.createElement(\"img\", {\n      className: \"category\",\n      src: \"\".concat(category.type.toLowerCase(), \".svg\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    })))), React.createElement(Search, {\n      submitSearch: this.submitSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"questions-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Questions\"), this.state.questions.map((q, ind) => React.createElement(Question, {\n      key: q.id,\n      question: q.question,\n      answer: q.answer,\n      category: this.state.categories[q.category - 1],\n      difficulty: q.difficulty,\n      questionAction: this.questionAction(q.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, this.createPagination())));\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["/Users/shehryarbajwa/trivia-API/starter/frontend/src/components/QuestionView.js"],"names":["React","Question","Search","$","QuestionView","Component","constructor","getQuestions","fetch","state","page","then","res","json","result","setState","questions","totalQuestions","total_questions","categories","currentCategory","current_category","error","alert","getByCategory","id","ajax","url","type","success","submitSearch","searchTerm","dataType","contentType","data","JSON","stringify","xhrFields","withCredentials","crossDomain","searchQuery","questionAction","action","window","confirm","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","i","push","render","map","category","toLowerCase","q","ind","question","answer","difficulty"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      searchQuery: '',\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: [],\n      currentCategory: null,\n    }\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  // getQuestions = () => {\n  //   $.ajax({\n  //     url: `/questions?page=${this.state.page}`, //TODO: update request URL\n  //     type: \"GET\",\n  //     success: (result) => {\n  //       //Here this refers to success\n  //       //success.setState\n  //       this.setState({\n  //         questions: result.questions,\n  //         totalQuestions: result.total_questions,\n  //         categories: result.categories,\n  //         currentCategory: result.current_category \n  //       })\n  //       return;\n  //     },\n  //     error: (error) => {\n  //       alert('Unable to load questions. Please try your request again')\n  //       return;\n  //     }\n  //   })\n  // }\n\n  getQuestions = () => {\n    fetch(`/questions?page=${this.state.page}`)\n    .then(res => res.json())\n    .then(\n      (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          categories: result.categories,\n          currentCategory: result.current_category\n        })\n      },\n      (error) => {\n        alert('Unable to load questions. Please try your request again')\n      }\n      )\n  }\n\n  selectPage(num) {\n    if (this.state.currentCategory) {\n      this.getByCategory(this.state.currentCategory.id, num)\n    } else if (this.state.searchQuery) {\n      this.submitSearch(this.state.searchQuery, num)\n    } else {\n      this.setState({page: num}, () => this.getQuestions());\n    }\n  }\n\n  createPagination(){\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(\n        <span\n          key={i}\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\n          onClick={() => {this.selectPage(i)}}>{i}\n        </span>)\n    }\n    return pageNumbers;\n  }\n\n  getByCategory= (id, page = 1) => {\n    $.ajax({\n      url: `/categories/${id}/questions?page=${page}`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          page: page,\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitSearch = (searchTerm, page = 1) => {\n    $.ajax({\n      url: `/searchQuestions?page=${page}`, //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({searchTerm: searchTerm}),\n      xhrFields: {\n        withCredentials: true\n      },\n      crossDomain: true,\n      success: (result) => {\n        this.setState({\n          searchQuery: searchTerm,\n          page: page,\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category\n        });\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions. Please try your request again')\n        return;\n      }\n    })\n  }\n\n  questionAction = (id) => (action) => {\n    if(action === 'DELETE') {\n      if(window.confirm('are you sure you want to delete the question?')) {\n        $.ajax({\n          url: `/questions/${id}`, //TODO: update request URL\n          type: \"DELETE\",\n          success: (result) => {\n            this.getQuestions();\n          },\n          error: (error) => {\n            alert('Unable to load questions. Please try your request again')\n            return;\n          }\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"question-view\">\n        <div className=\"categories-list\">\n          <h2 onClick={() => {this.getQuestions()}}>Categories</h2>\n          <ul>\n            {this.state.categories.map((category) => (\n              <li key={category.id} onClick={() => {this.getByCategory(category.id)}}>\n                {category.type}\n                <img className=\"category\" src={`${category.type.toLowerCase()}.svg`}/>\n              </li>\n            ))}\n          </ul>\n          <Search submitSearch={this.submitSearch}/>\n        </div>\n        <div className=\"questions-list\">\n          <h2>Questions</h2>\n          {this.state.questions.map((q, ind) => (\n            <Question\n              key={q.id}\n              question={q.question}\n              answer={q.answer}\n              category={this.state.categories[q.category - 1]}\n              difficulty={q.difficulty}\n              questionAction={this.questionAction(q.id)}\n            />\n          ))}\n          <div className=\"pagination-menu\">\n            {this.createPagination()}\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default QuestionView;"]},"metadata":{},"sourceType":"module"}